[05/24/2023 13:50:16] {test_reader.py:165} INFO -    Loaded examples from: /data1/wanghanbin/CodeT5-sourcecode/retrieve/retrieve_result_gen/gen_java_csn_test_100.pkl
[05/24/2023 13:50:16] {test_reader.py:166} INFO -    Loaded 100 eval examples.
[05/24/2023 13:50:16] {test_reader.py:167} INFO -    Example0
[05/24/2023 13:50:16] {test_reader.py:168} INFO -    id:0
[05/24/2023 13:50:16] {test_reader.py:169} INFO -    question:Makes sure the fast - path emits in order .
[05/24/2023 13:50:16] {test_reader.py:170} INFO -    target:protected final void fastPathOrderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[05/24/2023 13:50:16] {test_reader.py:171} INFO -    ctx0_text:private void handleEmission ( Function < S , Optional < O > > emission ) { emission . apply ( state ) . ifPresent ( this :: emit ) ; }
[05/24/2023 13:50:16] {test_reader.py:172} INFO -    ctx0_linked:
[05/24/2023 13:50:16] {test_reader.py:173} INFO -    ctx1_text:private void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < T > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = false ; return ; } queue = null ; } q . accept ( actual ) ; } }
[05/24/2023 13:50:16] {test_reader.py:174} INFO -    ctx1_linked:Loops until all notifications in the queue has been processed .
[05/24/2023 13:50:16] {test_reader.py:176} INFO -    Example1
[05/24/2023 13:50:16] {test_reader.py:177} INFO -    id:1
[05/24/2023 13:50:16] {test_reader.py:178} INFO -    question:Wraps an ObservableSource into an Observable if not already an Observable .
[05/24/2023 13:50:16] {test_reader.py:179} INFO -    target:@ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[05/24/2023 13:50:16] {test_reader.py:180} INFO -    ctx0_text:@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[05/24/2023 13:50:16] {test_reader.py:181} INFO -    ctx0_linked:Wraps an ObservableSource into an Observable if not already an Observable .
[05/24/2023 13:50:16] {test_reader.py:182} INFO -    ctx1_text:@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Single < T > wrap ( SingleSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Single ) { return RxJavaPlugins . onAssembly ( ( Single < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new SingleFromUnsafeSource < T > ( source ) ) ; }
[05/24/2023 13:50:16] {test_reader.py:183} INFO -    ctx1_linked:Wraps a SingleSource instance into a new Single instance if not already a Single instance . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {
[05/24/2023 13:50:16] {test_reader.py:185} INFO -    Creating eval dataset.(CodeDataset)
[05/24/2023 13:50:16] {test_reader.py:186} INFO -    opt.n_context:5
[05/24/2023 13:50:16] {test_reader.py:187} INFO -    opt.with_target:no
[05/24/2023 13:50:16] {test_reader.py:194} INFO -    Creating eval sampler.(SequentialSampler)
[05/24/2023 13:50:16] {test_reader.py:197} INFO -    Creating eval dataloader.(DataLoader)
[05/24/2023 13:50:16] {configuration_utils.py:262} INFO - loading configuration file /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_codet5_saleforce_eval5000step_java_v2/checkpoint/step-20000/config.json
[05/24/2023 13:50:16] {configuration_utils.py:300} INFO - Model config T5Config {
  "_name_or_path": "/content/drive/MyDrive/CodeT5/pretrained_models/codet5_base",
  "architectures": [
    "FiDT5"
  ],
  "bos_token_id": 1,
  "d_ff": 3072,
  "d_kv": 64,
  "d_model": 768,
  "decoder_start_token_id": 0,
  "dropout_rate": 0.1,
  "eos_token_id": 2,
  "feed_forward_proj": "relu",
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0"
  },
  "initializer_factor": 1.0,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0
  },
  "layer_norm_epsilon": 1e-06,
  "model_type": "t5",
  "n_positions": 512,
  "num_decoder_layers": 12,
  "num_heads": 12,
  "num_layers": 12,
  "output_past": true,
  "pad_token_id": 0,
  "relative_attention_num_buckets": 32,
  "task_specific_params": {
    "summarization": {
      "early_stopping": true,
      "length_penalty": 2.0,
      "max_length": 200,
      "min_length": 30,
      "no_repeat_ngram_size": 3,
      "num_beams": 4,
      "prefix": "summarize: "
    },
    "translation_en_to_de": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to German: "
    },
    "translation_en_to_fr": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to French: "
    },
    "translation_en_to_ro": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to Romanian: "
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.10.2",
  "vocab_size": 32100
}

[05/24/2023 13:50:16] {modeling_utils.py:665} INFO - loading weights file /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_codet5_saleforce_eval5000step_java_v2/checkpoint/step-20000/pytorch_model.bin
[05/24/2023 13:50:25] {modeling_utils.py:765} INFO - All model checkpoint weights were used when initializing FiDT5.

[05/24/2023 13:50:25] {modeling_utils.py:773} INFO - All the weights of FiDT5 were initialized from the model checkpoint at /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_codet5_saleforce_eval5000step_java_v2/checkpoint/step-20000/.
If your task is similar to the task the model of the ckeckpoint was trained on, you can already use FiDT5 for predictions without further training.
[05/24/2023 13:50:31] {test_reader.py:210} INFO -    Start eval
[05/24/2023 13:50:31] {test_reader.py:29} INFO - ***** Running evaluation on test set *****
  0%|          | 0/100 [00:00<?, ?it/s]  1%|          | 1/100 [00:12<21:09, 12.83s/it]  2%|▏         | 2/100 [00:14<10:30,  6.43s/it]  3%|▎         | 3/100 [00:16<07:04,  4.38s/it]  4%|▍         | 4/100 [00:18<05:06,  3.19s/it]  5%|▌         | 5/100 [00:24<06:48,  4.29s/it]  6%|▌         | 6/100 [00:25<05:16,  3.36s/it]  7%|▋         | 7/100 [00:32<06:38,  4.28s/it]  8%|▊         | 8/100 [00:33<05:12,  3.40s/it]  9%|▉         | 9/100 [00:34<03:59,  2.63s/it] 10%|█         | 10/100 [00:36<03:35,  2.39s/it] 11%|█         | 11/100 [00:38<03:21,  2.26s/it] 12%|█▏        | 12/100 [00:40<03:20,  2.28s/it] 13%|█▎        | 13/100 [00:41<02:52,  1.98s/it] 14%|█▍        | 14/100 [00:42<02:25,  1.69s/it] 15%|█▌        | 15/100 [00:44<02:09,  1.52s/it] 16%|█▌        | 16/100 [00:45<01:58,  1.42s/it] 17%|█▋        | 17/100 [00:46<01:53,  1.37s/it] 18%|█▊        | 18/100 [00:47<01:42,  1.25s/it] 19%|█▉        | 19/100 [00:48<01:37,  1.20s/it] 20%|██        | 20/100 [00:49<01:31,  1.15s/it] 21%|██        | 21/100 [00:50<01:30,  1.14s/it] 22%|██▏       | 22/100 [00:52<01:34,  1.22s/it] 23%|██▎       | 23/100 [00:53<01:29,  1.16s/it] 24%|██▍       | 24/100 [00:54<01:24,  1.11s/it] 25%|██▌       | 25/100 [01:00<03:15,  2.61s/it] 26%|██▌       | 26/100 [01:06<04:28,  3.63s/it] 27%|██▋       | 27/100 [01:12<05:18,  4.36s/it] 28%|██▊       | 28/100 [01:14<04:34,  3.82s/it] 29%|██▉       | 29/100 [01:16<03:35,  3.03s/it] 30%|███       | 30/100 [01:17<02:48,  2.41s/it] 31%|███       | 31/100 [01:18<02:35,  2.26s/it] 32%|███▏      | 32/100 [01:21<02:33,  2.25s/it] 33%|███▎      | 33/100 [01:22<02:17,  2.06s/it] 34%|███▍      | 34/100 [01:24<02:13,  2.03s/it] 35%|███▌      | 35/100 [01:25<01:56,  1.79s/it] 36%|███▌      | 36/100 [01:30<02:44,  2.57s/it] 37%|███▋      | 37/100 [01:33<02:45,  2.63s/it] 38%|███▊      | 38/100 [01:34<02:15,  2.18s/it] 39%|███▉      | 39/100 [01:40<03:25,  3.37s/it] 40%|████      | 40/100 [01:46<04:06,  4.12s/it] 41%|████      | 41/100 [01:47<03:11,  3.25s/it] 42%|████▏     | 42/100 [01:49<02:44,  2.84s/it] 43%|████▎     | 43/100 [01:50<02:11,  2.31s/it] 44%|████▍     | 44/100 [01:56<03:10,  3.40s/it] 45%|████▌     | 45/100 [01:57<02:31,  2.75s/it] 46%|████▌     | 46/100 [01:59<02:07,  2.36s/it] 47%|████▋     | 47/100 [02:05<03:02,  3.44s/it] 48%|████▊     | 48/100 [02:06<02:30,  2.90s/it] 49%|████▉     | 49/100 [02:08<02:17,  2.69s/it] 50%|█████     | 50/100 [02:10<01:55,  2.31s/it] 51%|█████     | 51/100 [02:12<01:49,  2.24s/it] 52%|█████▏    | 52/100 [02:15<01:56,  2.43s/it] 53%|█████▎    | 53/100 [02:17<01:47,  2.29s/it] 54%|█████▍    | 54/100 [02:23<02:34,  3.36s/it] 55%|█████▌    | 55/100 [02:24<02:07,  2.84s/it] 56%|█████▌    | 56/100 [02:25<01:43,  2.35s/it] 57%|█████▋    | 57/100 [02:32<02:31,  3.51s/it] 58%|█████▊    | 58/100 [02:38<03:01,  4.32s/it] 59%|█████▉    | 59/100 [02:41<02:39,  3.88s/it] 60%|██████    | 60/100 [02:43<02:20,  3.51s/it] 61%|██████    | 61/100 [02:45<01:53,  2.92s/it] 62%|██████▏   | 62/100 [02:47<01:43,  2.72s/it] 63%|██████▎   | 63/100 [02:53<02:17,  3.73s/it] 64%|██████▍   | 64/100 [02:59<02:40,  4.45s/it] 65%|██████▌   | 65/100 [03:05<02:48,  4.82s/it] 66%|██████▌   | 66/100 [03:11<02:56,  5.18s/it] 67%|██████▋   | 67/100 [03:17<02:58,  5.42s/it] 68%|██████▊   | 68/100 [03:23<03:02,  5.72s/it] 69%|██████▉   | 69/100 [03:25<02:15,  4.37s/it] 70%|███████   | 70/100 [03:27<01:53,  3.78s/it] 71%|███████   | 71/100 [03:30<01:40,  3.46s/it] 72%|███████▏  | 72/100 [03:36<02:00,  4.30s/it] 73%|███████▎  | 73/100 [03:37<01:31,  3.38s/it] 74%|███████▍  | 74/100 [03:44<01:50,  4.25s/it] 75%|███████▌  | 75/100 [03:46<01:29,  3.56s/it] 76%|███████▌  | 76/100 [03:48<01:16,  3.17s/it] 77%|███████▋  | 77/100 [03:51<01:13,  3.21s/it] 78%|███████▊  | 78/100 [03:57<01:30,  4.14s/it] 79%|███████▉  | 79/100 [04:00<01:14,  3.55s/it] 80%|████████  | 80/100 [04:03<01:11,  3.57s/it] 81%|████████  | 81/100 [04:05<00:55,  2.91s/it] 82%|████████▏ | 82/100 [04:06<00:45,  2.54s/it] 83%|████████▎ | 83/100 [04:12<01:00,  3.58s/it] 84%|████████▍ | 84/100 [04:14<00:48,  3.02s/it] 85%|████████▌ | 85/100 [04:20<00:58,  3.92s/it] 86%|████████▌ | 86/100 [04:26<01:04,  4.60s/it] 87%|████████▋ | 87/100 [04:32<01:05,  5.06s/it] 88%|████████▊ | 88/100 [04:35<00:50,  4.21s/it] 89%|████████▉ | 89/100 [04:37<00:40,  3.65s/it] 90%|█████████ | 90/100 [04:42<00:41,  4.14s/it] 91%|█████████ | 91/100 [04:44<00:30,  3.35s/it] 92%|█████████▏| 92/100 [04:50<00:33,  4.17s/it] 93%|█████████▎| 93/100 [04:53<00:26,  3.85s/it] 94%|█████████▍| 94/100 [04:57<00:23,  3.92s/it] 95%|█████████▌| 95/100 [05:03<00:23,  4.63s/it] 96%|█████████▌| 96/100 [05:10<00:20,  5.15s/it] 97%|█████████▋| 97/100 [05:11<00:12,  4.16s/it] 98%|█████████▊| 98/100 [05:14<00:07,  3.71s/it] 99%|█████████▉| 99/100 [05:16<00:03,  3.23s/it]100%|██████████| 100/100 [05:23<00:00,  4.17s/it]100%|██████████| 100/100 [05:23<00:00,  3.23s/it]ngram match: 0.3017513769470165, weighted ngram match: 0.36841534409357574, syntax_match: 0.41774580335731415, dataflow_match: 0.44165694282380397
[05/24/2023 13:55:55] {test_reader.py:74} INFO - ***** Eval results *****
[05/24/2023 13:55:55] {test_reader.py:76} INFO -   bleu = 30.18
[05/24/2023 13:55:55] {test_reader.py:76} INFO -   codebleu = 38.2392
[05/24/2023 13:55:55] {test_reader.py:76} INFO -   em = 18.0
[05/24/2023 13:55:55] {test_reader.py:218} INFO - [best-bleu] bleu-4: 30.18, em: 18.0000, codebleu: 38.2392


