[07/28/2023 11:59:20] {options.py:113} INFO - 
              answer_maxlength: 256                                     	(default: -1)
                checkpoint_dir: checkpoint                              	(default: ./checkpoint/)
                        device: cuda                                    	(default: None)
                     eval_data: /data1/wanghanbin/cerag_data/gen/concode/finetune_15000_gen_concode_test_100.pkl	(default: none)
                     eval_freq: 500                                     
                     eval_part: False                                   
               eval_print_freq: 1000                                    
                   global_rank: 0                                       	(default: None)
                is_distributed: False                                   	(default: None)
                       is_main: True                                    	(default: None)
                  is_slurm_job: False                                   	(default: None)
                    local_rank: 0                                       	(default: -1)
                     main_port: -1                                      
                       maxload: -1                                      
                    model_path: /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-246000/	(default: none)
                    model_size: base                                    
                     multi_gpu: False                                   	(default: None)
                    multi_node: False                                   	(default: None)
                     n_context: 5                                       	(default: 1)
                n_gpu_per_node: 1                                       	(default: None)
                       n_nodes: 1                                       	(default: None)
                          name: my_test_concode_246000                  	(default: experiment_name)
                      no_title: False                                   
                       node_id: 0                                       	(default: None)
            per_gpu_batch_size: 8                                       	(default: 1)
                     save_freq: 5000                                    
                          seed: 0                                       
                text_maxlength: 512                                     	(default: 200)
              train_batch_size: 8                                       	(default: None)
                    train_data: none                                    
                use_checkpoint: False                                   
                   with_target: no                                      
                    world_size: 1                                       	(default: None)
   write_crossattention_scores: False                                   
                 write_results: False                                   

[07/28/2023 11:59:21] {test_reader.py:236} INFO -    Loaded examples from: /data1/wanghanbin/cerag_data/gen/concode/finetune_15000_gen_concode_test_100.pkl
[07/28/2023 11:59:21] {test_reader.py:237} INFO -    Loaded 2000 eval examples.
[07/28/2023 11:59:21] {test_reader.py:238} INFO -    Example0
[07/28/2023 11:59:21] {test_reader.py:239} INFO -    id:0
[07/28/2023 11:59:21] {test_reader.py:240} INFO -    question:generate mappings for each function node and parameters and variables names associated with it . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void reset concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/28/2023 11:59:21] {test_reader.py:241} INFO -    target:void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; collectFuncNodes ( arg0 , loc0 , null ) ; }
[07/28/2023 11:59:21] {test_reader.py:242} INFO -    ctx0_text:void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; collectFuncNodes ( arg0 , loc0 , null ) ; }
[07/28/2023 11:59:21] {test_reader.py:243} INFO -    ctx0_linked:generate mappings for each function node and parameters and variables names associated with it . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void reset concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/28/2023 11:59:21] {test_reader.py:244} INFO -    ctx1_text:void function ( ) { funcObjects = new ObjArray ( ) ; functionVarMappings = new ArrayList ( ) ; }
[07/28/2023 11:59:21] {test_reader.py:245} INFO -    ctx1_linked:reset the static members for the tokenmapper . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void collectFunctionMappings concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/28/2023 11:59:21] {test_reader.py:247} INFO -    Example1
[07/28/2023 11:59:21] {test_reader.py:248} INFO -    id:1
[07/28/2023 11:59:21] {test_reader.py:249} INFO -    question:returns a hash of the given files contents . reads the file fully into memory before hashing so only use with small files . concode_field_sep Sha256Hash ZERO_HASH concode_elem_sep byte[] bytes concode_field_sep Sha256Hash createDouble concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep Sha256Hash create concode_elem_sep BigInteger toBigInteger concode_elem_sep String toString concode_elem_sep Sha256Hash duplicate concode_elem_sep int compareTo concode_elem_sep byte[] getBytes
[07/28/2023 11:59:21] {test_reader.py:250} INFO -    target:Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
[07/28/2023 11:59:21] {test_reader.py:251} INFO -    ctx0_text:byte [ ] function ( final byte [ ] ... arg0 ) { SHA3Digest loc0 = new SHA3Digest ( 512 ) ; for ( final byte [ ] loc1 : arg0 ) { loc0 . update ( loc1 , 0 , loc1 . length ) ; } byte [ ] loc2 = new byte [ 512 / 8 ] ; loc0 . doFinal ( loc2 , 0 ) ; return loc2 ; }
[07/28/2023 11:59:21] {test_reader.py:252} INFO -    ctx0_linked:performs a sha3-512 hash of the concatenated inputs . concode_field_sep Logger LOGGER concode_field_sep byte[] sha3_256 concode_elem_sep byte[] ripemd160 concode_elem_sep byte[] hash
[07/28/2023 11:59:21] {test_reader.py:253} INFO -    ctx1_text:Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
[07/28/2023 11:59:21] {test_reader.py:254} INFO -    ctx1_linked:returns a hash of the given files contents . reads the file fully into memory before hashing so only use with small files . concode_field_sep Sha256Hash ZERO_HASH concode_elem_sep byte[] bytes concode_field_sep Sha256Hash createDouble concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep Sha256Hash create concode_elem_sep BigInteger toBigInteger concode_elem_sep String toString concode_elem_sep Sha256Hash duplicate concode_elem_sep int compareTo concode_elem_sep byte[] getBytes
[07/28/2023 11:59:21] {test_reader.py:256} INFO -    Creating eval dataset.(CodeDataset)
[07/28/2023 11:59:21] {test_reader.py:257} INFO -    opt.n_context:5
[07/28/2023 11:59:21] {test_reader.py:258} INFO -    opt.with_target:no
[07/28/2023 11:59:21] {test_reader.py:265} INFO -    Creating eval sampler.(SequentialSampler)
[07/28/2023 11:59:21] {test_reader.py:268} INFO -    Creating eval dataloader.(DataLoader)
[07/28/2023 11:59:21] {configuration_utils.py:262} INFO - loading configuration file /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-246000/config.json
[07/28/2023 11:59:21] {configuration_utils.py:300} INFO - Model config T5Config {
  "_name_or_path": "/content/drive/MyDrive/CodeT5/pretrained_models/codet5_base",
  "architectures": [
    "FiDT5"
  ],
  "bos_token_id": 1,
  "d_ff": 3072,
  "d_kv": 64,
  "d_model": 768,
  "decoder_start_token_id": 0,
  "dropout_rate": 0.1,
  "eos_token_id": 2,
  "feed_forward_proj": "relu",
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0"
  },
  "initializer_factor": 1.0,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0
  },
  "layer_norm_epsilon": 1e-06,
  "model_type": "t5",
  "n_positions": 512,
  "num_decoder_layers": 12,
  "num_heads": 12,
  "num_layers": 12,
  "output_past": true,
  "pad_token_id": 0,
  "relative_attention_num_buckets": 32,
  "task_specific_params": {
    "summarization": {
      "early_stopping": true,
      "length_penalty": 2.0,
      "max_length": 200,
      "min_length": 30,
      "no_repeat_ngram_size": 3,
      "num_beams": 4,
      "prefix": "summarize: "
    },
    "translation_en_to_de": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to German: "
    },
    "translation_en_to_fr": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to French: "
    },
    "translation_en_to_ro": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to Romanian: "
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.10.2",
  "vocab_size": 32100
}

[07/28/2023 11:59:21] {modeling_utils.py:665} INFO - loading weights file /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-246000/pytorch_model.bin
[07/28/2023 11:59:26] {modeling_utils.py:765} INFO - All model checkpoint weights were used when initializing FiDT5.

[07/28/2023 11:59:26] {modeling_utils.py:773} INFO - All the weights of FiDT5 were initialized from the model checkpoint at /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-246000/.
If your task is similar to the task the model of the ckeckpoint was trained on, you can already use FiDT5 for predictions without further training.
[07/28/2023 11:59:29] {test_reader.py:281} INFO -    Start eval
[07/28/2023 11:59:29] {test_reader.py:31} INFO - ***** Running evaluation on test set *****
  0%|          | 0/250 [00:00<?, ?it/s]  0%|          | 1/250 [01:23<5:47:24, 83.71s/it]  1%|          | 2/250 [02:20<4:40:56, 67.97s/it]  1%|          | 3/250 [03:50<5:20:12, 77.78s/it]  2%|▏         | 4/250 [04:52<4:53:20, 71.55s/it]  2%|▏         | 5/250 [05:48<4:29:30, 66.00s/it]  2%|▏         | 6/250 [06:29<3:54:22, 57.63s/it]  3%|▎         | 7/250 [07:07<3:27:14, 51.17s/it]  3%|▎         | 8/250 [08:03<3:32:19, 52.64s/it]  4%|▎         | 9/250 [09:02<3:39:24, 54.62s/it]  4%|▍         | 10/250 [10:49<4:43:08, 70.79s/it]  4%|▍         | 11/250 [11:37<4:13:53, 63.74s/it]  5%|▍         | 12/250 [12:19<3:47:20, 57.31s/it]  5%|▌         | 13/250 [13:10<3:38:25, 55.30s/it]  6%|▌         | 14/250 [13:49<3:17:56, 50.32s/it]  6%|▌         | 15/250 [14:22<2:56:57, 45.18s/it]  6%|▋         | 16/250 [15:45<3:40:20, 56.50s/it]  7%|▋         | 17/250 [16:24<3:18:54, 51.22s/it]  7%|▋         | 18/250 [17:25<3:29:22, 54.15s/it]  8%|▊         | 19/250 [18:27<3:37:56, 56.61s/it]  8%|▊         | 20/250 [19:01<3:11:29, 49.95s/it]  8%|▊         | 21/250 [19:45<3:03:02, 47.96s/it]  9%|▉         | 22/250 [20:41<3:11:48, 50.48s/it]  9%|▉         | 23/250 [21:34<3:13:33, 51.16s/it] 10%|▉         | 24/250 [22:14<3:00:17, 47.86s/it] 10%|█         | 25/250 [22:52<2:48:25, 44.91s/it] 10%|█         | 26/250 [23:57<3:10:05, 50.92s/it] 11%|█         | 27/250 [24:32<2:51:09, 46.05s/it] 11%|█         | 28/250 [25:12<2:44:30, 44.46s/it] 12%|█▏        | 29/250 [26:02<2:49:40, 46.07s/it] 12%|█▏        | 30/250 [26:54<2:54:43, 47.65s/it] 12%|█▏        | 31/250 [27:29<2:40:54, 44.09s/it] 13%|█▎        | 32/250 [28:38<3:06:41, 51.38s/it] 13%|█▎        | 33/250 [29:59<3:37:45, 60.21s/it] 14%|█▎        | 34/250 [30:40<3:16:07, 54.48s/it] 14%|█▍        | 35/250 [31:57<3:39:29, 61.25s/it] 14%|█▍        | 36/250 [33:12<3:53:20, 65.42s/it] 15%|█▍        | 37/250 [34:36<4:12:27, 71.12s/it] 15%|█▌        | 38/250 [35:12<3:34:05, 60.59s/it] 16%|█▌        | 39/250 [35:46<3:05:07, 52.64s/it] 16%|█▌        | 40/250 [36:29<2:53:24, 49.54s/it] 16%|█▋        | 41/250 [37:12<2:46:10, 47.71s/it] 17%|█▋        | 42/250 [37:48<2:33:01, 44.14s/it] 17%|█▋        | 43/250 [38:38<2:38:33, 45.96s/it] 18%|█▊        | 44/250 [39:55<3:09:38, 55.24s/it] 18%|█▊        | 45/250 [40:49<3:07:40, 54.93s/it] 18%|█▊        | 46/250 [42:12<3:35:00, 63.24s/it] 19%|█▉        | 47/250 [44:06<4:25:14, 78.40s/it] 19%|█▉        | 48/250 [45:05<4:05:11, 72.83s/it] 20%|█▉        | 49/250 [46:05<3:50:38, 68.85s/it] 20%|██        | 50/250 [47:46<4:21:32, 78.46s/it] 20%|██        | 51/250 [49:30<4:45:48, 86.17s/it] 21%|██        | 52/250 [51:13<5:01:03, 91.23s/it] 21%|██        | 53/250 [52:47<5:02:36, 92.17s/it] 22%|██▏       | 54/250 [53:29<4:11:32, 77.00s/it] 22%|██▏       | 55/250 [54:13<3:38:08, 67.12s/it] 22%|██▏       | 56/250 [55:01<3:18:25, 61.37s/it] 23%|██▎       | 57/250 [56:00<3:15:03, 60.64s/it] 23%|██▎       | 58/250 [57:53<4:04:31, 76.41s/it] 24%|██▎       | 59/250 [58:36<3:31:34, 66.46s/it] 24%|██▍       | 60/250 [59:20<3:08:36, 59.56s/it] 24%|██▍       | 61/250 [1:00:58<3:44:19, 71.21s/it] 25%|██▍       | 62/250 [1:02:33<4:05:02, 78.21s/it] 25%|██▌       | 63/250 [1:03:28<3:41:49, 71.18s/it] 26%|██▌       | 64/250 [1:04:14<3:17:30, 63.71s/it] 26%|██▌       | 65/250 [1:05:49<3:45:06, 73.01s/it] 26%|██▋       | 66/250 [1:06:48<3:31:19, 68.91s/it] 27%|██▋       | 67/250 [1:08:07<3:39:09, 71.85s/it] 27%|██▋       | 68/250 [1:08:54<3:15:26, 64.43s/it] 28%|██▊       | 69/250 [1:09:39<2:57:03, 58.70s/it] 28%|██▊       | 70/250 [1:10:22<2:41:47, 53.93s/it] 28%|██▊       | 71/250 [1:11:15<2:40:24, 53.77s/it] 29%|██▉       | 72/250 [1:12:24<2:52:35, 58.18s/it] 29%|██▉       | 73/250 [1:13:17<2:47:23, 56.74s/it] 30%|██▉       | 74/250 [1:13:54<2:29:07, 50.84s/it] 30%|███       | 75/250 [1:15:29<3:06:58, 64.10s/it] 30%|███       | 76/250 [1:16:11<2:45:57, 57.23s/it] 31%|███       | 77/250 [1:16:50<2:29:24, 51.82s/it] 31%|███       | 78/250 [1:17:31<2:19:26, 48.64s/it] 32%|███▏      | 79/250 [1:18:52<2:46:26, 58.40s/it] 32%|███▏      | 80/250 [1:20:13<3:04:17, 65.04s/it] 32%|███▏      | 81/250 [1:20:57<2:45:53, 58.90s/it] 33%|███▎      | 82/250 [1:21:57<2:45:20, 59.05s/it] 33%|███▎      | 83/250 [1:23:12<2:57:53, 63.92s/it] 34%|███▎      | 84/250 [1:23:52<2:37:11, 56.82s/it] 34%|███▍      | 85/250 [1:24:47<2:34:38, 56.23s/it] 34%|███▍      | 86/250 [1:25:19<2:13:35, 48.87s/it] 35%|███▍      | 87/250 [1:26:39<2:38:43, 58.43s/it] 35%|███▌      | 88/250 [1:27:23<2:26:04, 54.10s/it] 36%|███▌      | 89/250 [1:28:02<2:12:22, 49.33s/it] 36%|███▌      | 90/250 [1:28:58<2:17:30, 51.57s/it] 36%|███▋      | 91/250 [1:30:12<2:33:59, 58.11s/it] 37%|███▋      | 92/250 [1:31:54<3:07:42, 71.28s/it] 37%|███▋      | 93/250 [1:32:30<2:39:13, 60.85s/it] 38%|███▊      | 94/250 [1:34:05<3:04:38, 71.02s/it] 38%|███▊      | 95/250 [1:34:52<2:44:27, 63.66s/it] 38%|███▊      | 96/250 [1:35:30<2:23:38, 55.96s/it] 39%|███▉      | 97/250 [1:36:26<2:22:57, 56.06s/it] 39%|███▉      | 98/250 [1:36:58<2:03:57, 48.93s/it] 40%|███▉      | 99/250 [1:37:34<1:53:11, 44.98s/it] 40%|████      | 100/250 [1:39:01<2:24:22, 57.75s/it] 40%|████      | 101/250 [1:40:00<2:24:17, 58.10s/it] 41%|████      | 102/250 [1:41:06<2:28:49, 60.34s/it] 41%|████      | 103/250 [1:42:44<2:55:22, 71.58s/it] 42%|████▏     | 104/250 [1:44:15<3:08:15, 77.36s/it] 42%|████▏     | 105/250 [1:45:17<2:56:13, 72.92s/it] 42%|████▏     | 106/250 [1:46:13<2:42:46, 67.82s/it] 43%|████▎     | 107/250 [1:47:18<2:39:15, 66.82s/it] 43%|████▎     | 108/250 [1:48:05<2:24:22, 61.00s/it] 44%|████▎     | 109/250 [1:48:54<2:15:14, 57.55s/it] 44%|████▍     | 110/250 [1:49:59<2:18:51, 59.51s/it] 44%|████▍     | 111/250 [1:50:37<2:03:30, 53.31s/it] 45%|████▍     | 112/250 [1:51:17<1:53:02, 49.15s/it] 45%|████▌     | 113/250 [1:52:04<1:50:55, 48.58s/it] 46%|████▌     | 114/250 [1:53:18<2:07:24, 56.21s/it] 46%|████▌     | 115/250 [1:55:00<2:37:01, 69.79s/it] 46%|████▋     | 116/250 [1:56:09<2:35:52, 69.80s/it] 47%|████▋     | 117/250 [1:58:04<3:04:30, 83.24s/it] 47%|████▋     | 118/250 [1:58:56<2:42:33, 73.89s/it] 48%|████▊     | 119/250 [2:00:00<2:34:55, 70.96s/it] 48%|████▊     | 120/250 [2:00:41<2:14:14, 61.96s/it] 48%|████▊     | 121/250 [2:01:19<1:57:41, 54.74s/it] 49%|████▉     | 122/250 [2:02:51<2:20:20, 65.78s/it] 49%|████▉     | 123/250 [2:03:31<2:03:24, 58.30s/it] 50%|████▉     | 124/250 [2:04:16<1:53:30, 54.05s/it] 50%|█████     | 125/250 [2:05:04<1:49:08, 52.39s/it] 50%|█████     | 126/250 [2:06:25<2:05:45, 60.85s/it] 51%|█████     | 127/250 [2:06:57<1:47:12, 52.29s/it] 51%|█████     | 128/250 [2:08:16<2:02:28, 60.24s/it] 52%|█████▏    | 129/250 [2:08:53<1:47:30, 53.31s/it] 52%|█████▏    | 130/250 [2:09:26<1:34:14, 47.12s/it] 52%|█████▏    | 131/250 [2:09:56<1:23:19, 42.01s/it] 53%|█████▎    | 132/250 [2:11:10<1:41:48, 51.77s/it] 53%|█████▎    | 133/250 [2:11:59<1:39:10, 50.86s/it] 54%|█████▎    | 134/250 [2:12:40<1:32:27, 47.83s/it] 54%|█████▍    | 135/250 [2:13:29<1:32:31, 48.27s/it] 54%|█████▍    | 136/250 [2:14:09<1:26:46, 45.67s/it] 55%|█████▍    | 137/250 [2:14:48<1:22:22, 43.74s/it] 55%|█████▌    | 138/250 [2:16:09<1:42:32, 54.94s/it] 56%|█████▌    | 139/250 [2:16:52<1:34:54, 51.30s/it] 56%|█████▌    | 140/250 [2:17:31<1:27:28, 47.71s/it] 56%|█████▋    | 141/250 [2:18:06<1:19:37, 43.83s/it] 57%|█████▋    | 142/250 [2:18:57<1:22:38, 45.91s/it] 57%|█████▋    | 143/250 [2:20:10<1:36:18, 54.00s/it] 58%|█████▊    | 144/250 [2:21:24<1:46:00, 60.00s/it] 58%|█████▊    | 145/250 [2:22:11<1:38:41, 56.39s/it] 58%|█████▊    | 146/250 [2:22:52<1:29:24, 51.58s/it] 59%|█████▉    | 147/250 [2:23:31<1:22:02, 47.79s/it] 59%|█████▉    | 148/250 [2:24:06<1:14:44, 43.97s/it] 60%|█████▉    | 149/250 [2:24:40<1:09:15, 41.14s/it] 60%|██████    | 150/250 [2:25:16<1:06:01, 39.61s/it] 60%|██████    | 151/250 [2:26:30<1:22:15, 49.85s/it] 61%|██████    | 152/250 [2:27:24<1:23:31, 51.14s/it] 61%|██████    | 153/250 [2:28:05<1:17:24, 47.88s/it] 62%|██████▏   | 154/250 [2:29:20<1:29:35, 55.99s/it] 62%|██████▏   | 155/250 [2:30:08<1:24:58, 53.67s/it] 62%|██████▏   | 156/250 [2:30:44<1:15:59, 48.51s/it] 63%|██████▎   | 157/250 [2:31:15<1:06:56, 43.19s/it] 63%|██████▎   | 158/250 [2:31:48<1:01:38, 40.20s/it] 64%|██████▎   | 159/250 [2:32:33<1:02:57, 41.52s/it] 64%|██████▍   | 160/250 [2:34:12<1:28:11, 58.79s/it] 64%|██████▍   | 161/250 [2:35:36<1:38:37, 66.49s/it] 65%|██████▍   | 162/250 [2:36:19<1:27:01, 59.33s/it] 65%|██████▌   | 163/250 [2:37:07<1:21:06, 55.94s/it] 66%|██████▌   | 164/250 [2:37:52<1:15:15, 52.51s/it] 66%|██████▌   | 165/250 [2:39:22<1:30:22, 63.79s/it] 66%|██████▋   | 166/250 [2:40:41<1:35:37, 68.31s/it] 67%|██████▋   | 167/250 [2:41:24<1:24:06, 60.80s/it] 67%|██████▋   | 168/250 [2:42:26<1:23:46, 61.29s/it] 68%|██████▊   | 169/250 [2:43:56<1:34:23, 69.93s/it] 68%|██████▊   | 170/250 [2:44:51<1:27:19, 65.49s/it] 68%|██████▊   | 171/250 [2:46:17<1:34:13, 71.56s/it] 69%|██████▉   | 172/250 [2:48:05<1:47:03, 82.35s/it] 69%|██████▉   | 173/250 [2:48:54<1:33:02, 72.50s/it] 70%|██████▉   | 174/250 [2:50:28<1:39:56, 78.90s/it] 70%|███████   | 175/250 [2:51:18<1:27:45, 70.20s/it] 70%|███████   | 176/250 [2:52:02<1:16:54, 62.36s/it] 71%|███████   | 177/250 [2:52:40<1:06:53, 54.98s/it] 71%|███████   | 178/250 [2:53:30<1:04:09, 53.47s/it] 72%|███████▏  | 179/250 [2:54:16<1:00:52, 51.44s/it] 72%|███████▏  | 180/250 [2:55:16<1:03:01, 54.02s/it] 72%|███████▏  | 181/250 [2:56:45<1:13:53, 64.26s/it] 73%|███████▎  | 182/250 [2:57:18<1:02:22, 55.03s/it] 73%|███████▎  | 183/250 [2:58:06<58:56, 52.78s/it]   74%|███████▎  | 184/250 [2:58:36<50:45, 46.14s/it] 74%|███████▍  | 185/250 [2:59:09<45:35, 42.08s/it] 74%|███████▍  | 186/250 [3:00:08<50:29, 47.33s/it] 75%|███████▍  | 187/250 [3:00:46<46:30, 44.30s/it] 75%|███████▌  | 188/250 [3:01:18<41:54, 40.56s/it] 76%|███████▌  | 189/250 [3:01:55<40:19, 39.66s/it] 76%|███████▌  | 190/250 [3:02:37<40:26, 40.45s/it] 76%|███████▋  | 191/250 [3:03:10<37:31, 38.16s/it] 77%|███████▋  | 192/250 [3:03:38<33:49, 34.99s/it] 77%|███████▋  | 193/250 [3:04:13<33:22, 35.13s/it] 78%|███████▊  | 194/250 [3:05:03<36:58, 39.62s/it] 78%|███████▊  | 195/250 [3:05:43<36:16, 39.57s/it] 78%|███████▊  | 196/250 [3:06:31<38:02, 42.26s/it] 79%|███████▉  | 197/250 [3:07:13<37:08, 42.05s/it] 79%|███████▉  | 198/250 [3:08:29<45:21, 52.33s/it] 80%|███████▉  | 199/250 [3:09:20<44:01, 51.80s/it] 80%|████████  | 200/250 [3:09:51<38:03, 45.66s/it] 80%|████████  | 201/250 [3:10:47<39:47, 48.72s/it] 81%|████████  | 202/250 [3:12:05<45:54, 57.40s/it] 81%|████████  | 203/250 [3:12:51<42:16, 53.97s/it] 82%|████████▏ | 204/250 [3:13:24<36:33, 47.69s/it] 82%|████████▏ | 205/250 [3:14:23<38:22, 51.18s/it] 82%|████████▏ | 206/250 [3:15:14<37:27, 51.07s/it] 83%|████████▎ | 207/250 [3:15:48<33:04, 46.15s/it] 83%|████████▎ | 208/250 [3:16:46<34:39, 49.51s/it] 84%|████████▎ | 209/250 [3:17:17<29:59, 43.89s/it] 84%|████████▍ | 210/250 [3:18:02<29:30, 44.25s/it] 84%|████████▍ | 211/250 [3:19:17<34:52, 53.66s/it] 85%|████████▍ | 212/250 [3:20:06<32:59, 52.10s/it] 85%|████████▌ | 213/250 [3:20:46<29:51, 48.42s/it] 86%|████████▌ | 214/250 [3:21:26<27:39, 46.10s/it] 86%|████████▌ | 215/250 [3:23:04<35:57, 61.65s/it] 86%|████████▋ | 216/250 [3:24:09<35:25, 62.52s/it] 87%|████████▋ | 217/250 [3:25:07<33:38, 61.17s/it] 87%|████████▋ | 218/250 [3:26:12<33:17, 62.42s/it] 88%|████████▊ | 219/250 [3:26:51<28:35, 55.33s/it] 88%|████████▊ | 220/250 [3:27:38<26:30, 53.01s/it] 88%|████████▊ | 221/250 [3:28:32<25:39, 53.10s/it] 89%|████████▉ | 222/250 [3:30:04<30:12, 64.72s/it] 89%|████████▉ | 223/250 [3:30:49<26:30, 58.92s/it] 90%|████████▉ | 224/250 [3:31:36<23:59, 55.37s/it] 90%|█████████ | 225/250 [3:32:20<21:41, 52.07s/it] 90%|█████████ | 226/250 [3:33:27<22:37, 56.54s/it] 91%|█████████ | 227/250 [3:34:22<21:26, 55.92s/it] 91%|█████████ | 228/250 [3:35:05<19:07, 52.16s/it] 92%|█████████▏| 229/250 [3:35:52<17:43, 50.63s/it] 92%|█████████▏| 230/250 [3:36:37<16:18, 48.92s/it] 92%|█████████▏| 231/250 [3:37:50<17:42, 55.94s/it] 93%|█████████▎| 232/250 [3:39:25<20:22, 67.91s/it] 93%|█████████▎| 233/250 [3:41:08<22:10, 78.27s/it] 94%|█████████▎| 234/250 [3:42:46<22:26, 84.18s/it] 94%|█████████▍| 235/250 [3:43:34<18:21, 73.45s/it] 94%|█████████▍| 236/250 [3:44:24<15:27, 66.24s/it] 95%|█████████▍| 237/250 [3:46:00<16:17, 75.23s/it] 95%|█████████▌| 238/250 [3:47:05<14:25, 72.09s/it] 96%|█████████▌| 239/250 [3:48:35<14:11, 77.44s/it] 96%|█████████▌| 240/250 [3:49:25<11:33, 69.35s/it] 96%|█████████▋| 241/250 [3:50:20<09:44, 64.95s/it] 97%|█████████▋| 242/250 [3:51:40<09:16, 69.53s/it] 97%|█████████▋| 243/250 [3:52:16<06:56, 59.43s/it] 98%|█████████▊| 244/250 [3:52:41<04:54, 49.08s/it] 98%|█████████▊| 245/250 [3:53:38<04:17, 51.48s/it] 98%|█████████▊| 246/250 [3:54:44<03:43, 55.96s/it] 99%|█████████▉| 247/250 [3:55:21<02:30, 50.26s/it] 99%|█████████▉| 248/250 [3:56:24<01:48, 54.12s/it]100%|█████████▉| 249/250 [3:57:34<00:58, 58.79s/it]100%|██████████| 250/250 [3:58:15<00:00, 53.36s/it]100%|██████████| 250/250 [3:58:15<00:00, 57.18s/it]ngram match: 0.4020040594759647, weighted ngram match: 0.4369533152844583, syntax_match: 0.474044001313472, dataflow_match: 0.4999521118666794
[07/28/2023 15:57:51] {test_reader.py:76} INFO - ***** Eval results *****
[07/28/2023 15:57:51] {test_reader.py:78} INFO -   bleu = 40.2
[07/28/2023 15:57:51] {test_reader.py:78} INFO -   codebleu = 45.3238
[07/28/2023 15:57:51] {test_reader.py:78} INFO -   em = 22.75
[07/28/2023 15:57:51] {test_reader.py:289} INFO - [best-bleu] bleu-4: 40.20, em: 22.7500, codebleu: 45.3238


