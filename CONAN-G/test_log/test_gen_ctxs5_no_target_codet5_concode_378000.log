[07/29/2023 23:29:50] {options.py:113} INFO - 
              answer_maxlength: 256                                     	(default: -1)
                checkpoint_dir: checkpoint                              	(default: ./checkpoint/)
                        device: cuda                                    	(default: None)
                     eval_data: /data1/wanghanbin/cerag_data/gen/concode/finetune_15000_gen_concode_test_100.pkl	(default: none)
                     eval_freq: 500                                     
                     eval_part: False                                   
               eval_print_freq: 1000                                    
                   global_rank: 0                                       	(default: None)
                is_distributed: False                                   	(default: None)
                       is_main: True                                    	(default: None)
                  is_slurm_job: False                                   	(default: None)
                    local_rank: 0                                       	(default: -1)
                     main_port: -1                                      
                       maxload: -1                                      
                    model_path: /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-378000/	(default: none)
                    model_size: base                                    
                     multi_gpu: False                                   	(default: None)
                    multi_node: False                                   	(default: None)
                     n_context: 5                                       	(default: 1)
                n_gpu_per_node: 1                                       	(default: None)
                       n_nodes: 1                                       	(default: None)
                          name: my_test_concode_378000                  	(default: experiment_name)
                      no_title: False                                   
                       node_id: 0                                       	(default: None)
            per_gpu_batch_size: 8                                       	(default: 1)
                     save_freq: 5000                                    
                          seed: 0                                       
                text_maxlength: 512                                     	(default: 200)
              train_batch_size: 8                                       	(default: None)
                    train_data: none                                    
                use_checkpoint: False                                   
                   with_target: no                                      
                    world_size: 1                                       	(default: None)
   write_crossattention_scores: False                                   
                 write_results: False                                   

[07/29/2023 23:29:51] {test_reader.py:236} INFO -    Loaded examples from: /data1/wanghanbin/cerag_data/gen/concode/finetune_15000_gen_concode_test_100.pkl
[07/29/2023 23:29:51] {test_reader.py:237} INFO -    Loaded 2000 eval examples.
[07/29/2023 23:29:51] {test_reader.py:238} INFO -    Example0
[07/29/2023 23:29:51] {test_reader.py:239} INFO -    id:0
[07/29/2023 23:29:51] {test_reader.py:240} INFO -    question:generate mappings for each function node and parameters and variables names associated with it . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void reset concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/29/2023 23:29:51] {test_reader.py:241} INFO -    target:void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; collectFuncNodes ( arg0 , loc0 , null ) ; }
[07/29/2023 23:29:51] {test_reader.py:242} INFO -    ctx0_text:void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; collectFuncNodes ( arg0 , loc0 , null ) ; }
[07/29/2023 23:29:51] {test_reader.py:243} INFO -    ctx0_linked:generate mappings for each function node and parameters and variables names associated with it . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void reset concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/29/2023 23:29:51] {test_reader.py:244} INFO -    ctx1_text:void function ( ) { funcObjects = new ObjArray ( ) ; functionVarMappings = new ArrayList ( ) ; }
[07/29/2023 23:29:51] {test_reader.py:245} INFO -    ctx1_linked:reset the static members for the tokenmapper . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void collectFunctionMappings concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/29/2023 23:29:51] {test_reader.py:247} INFO -    Example1
[07/29/2023 23:29:51] {test_reader.py:248} INFO -    id:1
[07/29/2023 23:29:51] {test_reader.py:249} INFO -    question:returns a hash of the given files contents . reads the file fully into memory before hashing so only use with small files . concode_field_sep Sha256Hash ZERO_HASH concode_elem_sep byte[] bytes concode_field_sep Sha256Hash createDouble concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep Sha256Hash create concode_elem_sep BigInteger toBigInteger concode_elem_sep String toString concode_elem_sep Sha256Hash duplicate concode_elem_sep int compareTo concode_elem_sep byte[] getBytes
[07/29/2023 23:29:51] {test_reader.py:250} INFO -    target:Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
[07/29/2023 23:29:51] {test_reader.py:251} INFO -    ctx0_text:byte [ ] function ( final byte [ ] ... arg0 ) { SHA3Digest loc0 = new SHA3Digest ( 512 ) ; for ( final byte [ ] loc1 : arg0 ) { loc0 . update ( loc1 , 0 , loc1 . length ) ; } byte [ ] loc2 = new byte [ 512 / 8 ] ; loc0 . doFinal ( loc2 , 0 ) ; return loc2 ; }
[07/29/2023 23:29:51] {test_reader.py:252} INFO -    ctx0_linked:performs a sha3-512 hash of the concatenated inputs . concode_field_sep Logger LOGGER concode_field_sep byte[] sha3_256 concode_elem_sep byte[] ripemd160 concode_elem_sep byte[] hash
[07/29/2023 23:29:51] {test_reader.py:253} INFO -    ctx1_text:Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
[07/29/2023 23:29:51] {test_reader.py:254} INFO -    ctx1_linked:returns a hash of the given files contents . reads the file fully into memory before hashing so only use with small files . concode_field_sep Sha256Hash ZERO_HASH concode_elem_sep byte[] bytes concode_field_sep Sha256Hash createDouble concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep Sha256Hash create concode_elem_sep BigInteger toBigInteger concode_elem_sep String toString concode_elem_sep Sha256Hash duplicate concode_elem_sep int compareTo concode_elem_sep byte[] getBytes
[07/29/2023 23:29:51] {test_reader.py:256} INFO -    Creating eval dataset.(CodeDataset)
[07/29/2023 23:29:51] {test_reader.py:257} INFO -    opt.n_context:5
[07/29/2023 23:29:51] {test_reader.py:258} INFO -    opt.with_target:no
[07/29/2023 23:29:51] {test_reader.py:265} INFO -    Creating eval sampler.(SequentialSampler)
[07/29/2023 23:29:51] {test_reader.py:268} INFO -    Creating eval dataloader.(DataLoader)
[07/29/2023 23:29:51] {configuration_utils.py:262} INFO - loading configuration file /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-378000/config.json
[07/29/2023 23:29:51] {configuration_utils.py:300} INFO - Model config T5Config {
  "_name_or_path": "/content/drive/MyDrive/CodeT5/pretrained_models/codet5_base",
  "architectures": [
    "FiDT5"
  ],
  "bos_token_id": 1,
  "d_ff": 3072,
  "d_kv": 64,
  "d_model": 768,
  "decoder_start_token_id": 0,
  "dropout_rate": 0.1,
  "eos_token_id": 2,
  "feed_forward_proj": "relu",
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0"
  },
  "initializer_factor": 1.0,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0
  },
  "layer_norm_epsilon": 1e-06,
  "model_type": "t5",
  "n_positions": 512,
  "num_decoder_layers": 12,
  "num_heads": 12,
  "num_layers": 12,
  "output_past": true,
  "pad_token_id": 0,
  "relative_attention_num_buckets": 32,
  "task_specific_params": {
    "summarization": {
      "early_stopping": true,
      "length_penalty": 2.0,
      "max_length": 200,
      "min_length": 30,
      "no_repeat_ngram_size": 3,
      "num_beams": 4,
      "prefix": "summarize: "
    },
    "translation_en_to_de": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to German: "
    },
    "translation_en_to_fr": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to French: "
    },
    "translation_en_to_ro": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to Romanian: "
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.10.2",
  "vocab_size": 32100
}

[07/29/2023 23:29:51] {modeling_utils.py:665} INFO - loading weights file /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-378000/pytorch_model.bin
[07/29/2023 23:29:55] {modeling_utils.py:765} INFO - All model checkpoint weights were used when initializing FiDT5.

[07/29/2023 23:29:55] {modeling_utils.py:773} INFO - All the weights of FiDT5 were initialized from the model checkpoint at /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-378000/.
If your task is similar to the task the model of the ckeckpoint was trained on, you can already use FiDT5 for predictions without further training.
[07/29/2023 23:29:56] {test_reader.py:281} INFO -    Start eval
[07/29/2023 23:29:56] {test_reader.py:31} INFO - ***** Running evaluation on test set *****
  0%|          | 0/250 [00:00<?, ?it/s]  0%|          | 1/250 [00:09<38:39,  9.32s/it]  1%|          | 2/250 [00:21<44:47, 10.84s/it]  1%|          | 3/250 [00:32<46:13, 11.23s/it]  2%|▏         | 4/250 [00:44<47:02, 11.47s/it]  2%|▏         | 5/250 [00:55<45:28, 11.14s/it]  2%|▏         | 6/250 [01:14<56:05, 13.79s/it]  3%|▎         | 7/250 [01:19<44:12, 10.92s/it]  3%|▎         | 8/250 [01:24<36:40,  9.09s/it]  4%|▎         | 9/250 [01:30<33:14,  8.28s/it]  4%|▍         | 10/250 [01:37<30:39,  7.66s/it]  4%|▍         | 11/250 [01:56<44:34, 11.19s/it]  5%|▍         | 12/250 [02:04<40:40, 10.25s/it]  5%|▌         | 13/250 [02:16<42:07, 10.67s/it]  6%|▌         | 14/250 [02:27<43:17, 11.01s/it]  6%|▌         | 15/250 [02:34<37:19,  9.53s/it]  6%|▋         | 16/250 [02:53<48:37, 12.47s/it]  7%|▋         | 17/250 [03:03<45:21, 11.68s/it]  7%|▋         | 18/250 [03:12<42:31, 11.00s/it]  8%|▊         | 19/250 [03:21<39:58, 10.38s/it]  8%|▊         | 20/250 [03:28<36:27,  9.51s/it]  8%|▊         | 21/250 [03:35<33:12,  8.70s/it]  9%|▉         | 22/250 [03:50<39:26, 10.38s/it]  9%|▉         | 23/250 [04:04<43:55, 11.61s/it] 10%|▉         | 24/250 [04:14<41:31, 11.03s/it] 10%|█         | 25/250 [04:23<38:50, 10.36s/it] 10%|█         | 26/250 [04:30<35:50,  9.60s/it] 11%|█         | 27/250 [04:38<33:27,  9.00s/it] 11%|█         | 28/250 [04:46<32:13,  8.71s/it] 12%|█▏        | 29/250 [04:54<31:04,  8.44s/it] 12%|█▏        | 30/250 [05:00<28:12,  7.69s/it] 12%|█▏        | 31/250 [05:08<28:27,  7.80s/it] 13%|█▎        | 32/250 [05:15<27:57,  7.70s/it] 13%|█▎        | 33/250 [05:27<31:43,  8.77s/it] 14%|█▎        | 34/250 [05:46<43:00, 11.94s/it] 14%|█▍        | 35/250 [05:55<40:06, 11.19s/it] 14%|█▍        | 36/250 [06:04<36:47, 10.32s/it] 15%|█▍        | 37/250 [06:23<45:50, 12.91s/it] 15%|█▌        | 38/250 [06:29<38:43, 10.96s/it] 16%|█▌        | 39/250 [06:36<34:35,  9.84s/it] 16%|█▌        | 40/250 [06:44<31:49,  9.09s/it] 16%|█▋        | 41/250 [06:49<27:57,  8.03s/it] 17%|█▋        | 42/250 [07:08<39:18, 11.34s/it] 17%|█▋        | 43/250 [07:20<39:38, 11.49s/it] 18%|█▊        | 44/250 [07:27<35:12, 10.26s/it] 18%|█▊        | 45/250 [07:38<35:17, 10.33s/it] 18%|█▊        | 46/250 [07:47<33:36,  9.88s/it] 19%|█▉        | 47/250 [08:00<36:59, 10.94s/it] 19%|█▉        | 48/250 [08:10<36:00, 10.70s/it] 20%|█▉        | 49/250 [08:19<33:53, 10.12s/it] 20%|██        | 50/250 [08:27<31:58,  9.59s/it] 20%|██        | 51/250 [08:35<30:11,  9.10s/it] 21%|██        | 52/250 [08:43<28:09,  8.53s/it] 21%|██        | 53/250 [08:50<27:16,  8.31s/it] 22%|██▏       | 54/250 [09:01<29:51,  9.14s/it] 22%|██▏       | 55/250 [09:08<27:26,  8.44s/it] 22%|██▏       | 56/250 [09:15<25:25,  7.86s/it] 23%|██▎       | 57/250 [09:24<26:35,  8.26s/it] 23%|██▎       | 58/250 [09:32<25:56,  8.11s/it] 24%|██▎       | 59/250 [09:40<26:20,  8.28s/it] 24%|██▍       | 60/250 [09:46<24:00,  7.58s/it] 24%|██▍       | 61/250 [09:54<23:37,  7.50s/it] 25%|██▍       | 62/250 [10:08<29:29,  9.41s/it] 25%|██▌       | 63/250 [10:21<32:44, 10.50s/it] 26%|██▌       | 64/250 [10:30<31:09, 10.05s/it] 26%|██▌       | 65/250 [10:49<39:14, 12.73s/it] 26%|██▋       | 66/250 [10:57<35:15, 11.50s/it] 27%|██▋       | 67/250 [11:16<41:52, 13.73s/it] 27%|██▋       | 68/250 [11:24<36:47, 12.13s/it] 28%|██▊       | 69/250 [11:44<42:57, 14.24s/it] 28%|██▊       | 70/250 [11:54<39:16, 13.09s/it] 28%|██▊       | 71/250 [12:02<34:19, 11.50s/it] 29%|██▉       | 72/250 [12:12<33:10, 11.18s/it] 29%|██▉       | 73/250 [12:22<31:28, 10.67s/it] 30%|██▉       | 74/250 [12:32<30:47, 10.50s/it] 30%|███       | 75/250 [12:42<30:15, 10.37s/it] 30%|███       | 76/250 [12:50<27:58,  9.64s/it] 31%|███       | 77/250 [13:00<28:04,  9.74s/it] 31%|███       | 78/250 [13:06<24:59,  8.72s/it] 32%|███▏      | 79/250 [13:28<35:42, 12.53s/it] 32%|███▏      | 80/250 [13:40<35:16, 12.45s/it] 32%|███▏      | 81/250 [13:59<41:08, 14.61s/it] 33%|███▎      | 82/250 [14:16<42:05, 15.03s/it] 33%|███▎      | 83/250 [14:26<37:48, 13.58s/it] 34%|███▎      | 84/250 [14:39<37:00, 13.38s/it] 34%|███▍      | 85/250 [14:49<33:57, 12.35s/it] 34%|███▍      | 86/250 [14:57<30:15, 11.07s/it] 35%|███▍      | 87/250 [15:18<38:36, 14.21s/it] 35%|███▌      | 88/250 [15:27<34:05, 12.63s/it] 36%|███▌      | 89/250 [15:40<34:19, 12.79s/it] 36%|███▌      | 90/250 [16:02<40:57, 15.36s/it] 36%|███▋      | 91/250 [16:12<36:47, 13.89s/it] 37%|███▋      | 92/250 [16:24<34:40, 13.17s/it] 37%|███▋      | 93/250 [16:40<37:21, 14.28s/it] 38%|███▊      | 94/250 [16:49<32:54, 12.66s/it] 38%|███▊      | 95/250 [17:00<31:05, 12.03s/it] 38%|███▊      | 96/250 [17:12<30:45, 11.99s/it] 39%|███▉      | 97/250 [17:20<27:37, 10.84s/it] 39%|███▉      | 98/250 [17:27<24:48,  9.80s/it] 40%|███▉      | 99/250 [17:38<25:21, 10.08s/it] 40%|████      | 100/250 [17:49<25:37, 10.25s/it] 40%|████      | 101/250 [18:02<27:26, 11.05s/it] 41%|████      | 102/250 [18:13<27:32, 11.16s/it] 41%|████      | 103/250 [18:25<27:35, 11.26s/it] 42%|████▏     | 104/250 [18:35<27:05, 11.13s/it] 42%|████▏     | 105/250 [18:43<24:40, 10.21s/it] 42%|████▏     | 106/250 [18:53<24:06, 10.05s/it] 43%|████▎     | 107/250 [19:01<22:22,  9.39s/it] 43%|████▎     | 108/250 [19:20<28:44, 12.14s/it] 44%|████▎     | 109/250 [19:30<27:20, 11.64s/it] 44%|████▍     | 110/250 [19:39<25:39, 10.99s/it] 44%|████▍     | 111/250 [19:49<24:38, 10.64s/it] 45%|████▍     | 112/250 [20:03<26:30, 11.52s/it] 45%|████▌     | 113/250 [20:10<23:21, 10.23s/it] 46%|████▌     | 114/250 [20:27<27:24, 12.09s/it] 46%|████▌     | 115/250 [20:34<24:07, 10.73s/it] 46%|████▋     | 116/250 [20:44<23:29, 10.52s/it] 47%|████▋     | 117/250 [21:05<30:16, 13.66s/it] 47%|████▋     | 118/250 [21:13<26:04, 11.85s/it] 48%|████▊     | 119/250 [21:22<24:15, 11.11s/it] 48%|████▊     | 120/250 [21:33<24:03, 11.10s/it] 48%|████▊     | 121/250 [21:43<22:58, 10.68s/it] 49%|████▉     | 122/250 [21:55<23:58, 11.24s/it] 49%|████▉     | 123/250 [22:04<22:14, 10.51s/it] 50%|████▉     | 124/250 [22:27<29:31, 14.06s/it] 50%|█████     | 125/250 [22:38<27:31, 13.21s/it] 50%|█████     | 126/250 [22:46<23:59, 11.61s/it] 51%|█████     | 127/250 [22:54<21:38, 10.56s/it] 51%|█████     | 128/250 [23:02<19:51,  9.77s/it] 52%|█████▏    | 129/250 [23:13<20:28, 10.15s/it] 52%|█████▏    | 130/250 [23:26<22:17, 11.14s/it] 52%|█████▏    | 131/250 [23:35<20:48, 10.49s/it] 53%|█████▎    | 132/250 [23:50<23:19, 11.86s/it] 53%|█████▎    | 133/250 [24:13<29:24, 15.08s/it] 54%|█████▎    | 134/250 [24:22<25:54, 13.40s/it] 54%|█████▍    | 135/250 [24:38<26:56, 14.06s/it] 54%|█████▍    | 136/250 [24:50<25:34, 13.46s/it] 55%|█████▍    | 137/250 [25:00<23:38, 12.55s/it] 55%|█████▌    | 138/250 [25:10<21:40, 11.61s/it] 56%|█████▌    | 139/250 [25:20<20:38, 11.16s/it] 56%|█████▌    | 140/250 [25:41<25:46, 14.06s/it] 56%|█████▋    | 141/250 [25:50<22:49, 12.56s/it] 57%|█████▋    | 142/250 [26:04<23:23, 13.00s/it] 57%|█████▋    | 143/250 [26:14<21:45, 12.20s/it] 58%|█████▊    | 144/250 [26:23<19:33, 11.07s/it] 58%|█████▊    | 145/250 [26:33<19:13, 10.98s/it] 58%|█████▊    | 146/250 [26:42<17:50, 10.29s/it] 59%|█████▉    | 147/250 [26:50<16:39,  9.71s/it] 59%|█████▉    | 148/250 [26:59<15:49,  9.31s/it] 60%|█████▉    | 149/250 [27:13<18:13, 10.82s/it] 60%|██████    | 150/250 [27:26<19:04, 11.44s/it] 60%|██████    | 151/250 [27:34<17:00, 10.31s/it] 61%|██████    | 152/250 [27:47<18:20, 11.23s/it] 61%|██████    | 153/250 [27:57<17:26, 10.79s/it] 62%|██████▏   | 154/250 [28:07<16:47, 10.49s/it] 62%|██████▏   | 155/250 [28:18<17:08, 10.82s/it] 62%|██████▏   | 156/250 [28:33<18:58, 12.11s/it] 63%|██████▎   | 157/250 [28:45<18:25, 11.89s/it] 63%|██████▎   | 158/250 [29:07<23:02, 15.03s/it] 64%|██████▎   | 159/250 [29:25<24:00, 15.83s/it] 64%|██████▍   | 160/250 [29:48<26:53, 17.93s/it] 64%|██████▍   | 161/250 [30:07<27:04, 18.25s/it] 65%|██████▍   | 162/250 [30:17<23:29, 16.01s/it] 65%|██████▌   | 163/250 [30:25<19:29, 13.44s/it] 66%|██████▌   | 164/250 [30:34<17:39, 12.32s/it] 66%|██████▌   | 165/250 [30:42<15:14, 10.76s/it] 66%|██████▋   | 166/250 [31:03<19:43, 14.09s/it] 67%|██████▋   | 167/250 [31:13<17:26, 12.61s/it] 67%|██████▋   | 168/250 [31:24<16:41, 12.21s/it] 68%|██████▊   | 169/250 [31:38<17:18, 12.82s/it] 68%|██████▊   | 170/250 [31:45<14:48, 11.10s/it] 68%|██████▊   | 171/250 [31:55<13:53, 10.55s/it] 69%|██████▉   | 172/250 [32:06<14:02, 10.80s/it] 69%|██████▉   | 173/250 [32:14<12:40,  9.88s/it] 70%|██████▉   | 174/250 [32:30<14:50, 11.72s/it] 70%|███████   | 175/250 [32:39<13:35, 10.87s/it] 70%|███████   | 176/250 [33:00<17:13, 13.96s/it] 71%|███████   | 177/250 [33:20<19:08, 15.73s/it] 71%|███████   | 178/250 [33:29<16:45, 13.96s/it] 72%|███████▏  | 179/250 [33:38<14:41, 12.41s/it] 72%|███████▏  | 180/250 [33:53<15:17, 13.10s/it] 72%|███████▏  | 181/250 [34:03<13:59, 12.17s/it] 73%|███████▎  | 182/250 [34:15<13:49, 12.20s/it] 73%|███████▎  | 183/250 [34:30<14:32, 13.02s/it] 74%|███████▎  | 184/250 [34:36<11:54, 10.82s/it] 74%|███████▍  | 185/250 [34:42<10:16,  9.49s/it] 74%|███████▍  | 186/250 [34:52<10:14,  9.60s/it] 75%|███████▍  | 187/250 [35:03<10:32, 10.04s/it] 75%|███████▌  | 188/250 [35:11<09:42,  9.39s/it] 76%|███████▌  | 189/250 [35:19<09:04,  8.93s/it] 76%|███████▌  | 190/250 [35:28<09:04,  9.08s/it] 76%|███████▋  | 191/250 [35:35<08:19,  8.47s/it] 77%|███████▋  | 192/250 [35:46<08:52,  9.18s/it] 77%|███████▋  | 193/250 [35:59<09:47, 10.31s/it] 78%|███████▊  | 194/250 [36:08<09:08,  9.79s/it] 78%|███████▊  | 195/250 [36:27<11:38, 12.70s/it] 78%|███████▊  | 196/250 [36:38<10:51, 12.06s/it] 79%|███████▉  | 197/250 [36:46<09:40, 10.95s/it] 79%|███████▉  | 198/250 [36:55<09:05, 10.49s/it] 80%|███████▉  | 199/250 [37:02<08:00,  9.43s/it] 80%|████████  | 200/250 [37:16<08:46, 10.53s/it] 80%|████████  | 201/250 [37:27<08:44, 10.70s/it] 81%|████████  | 202/250 [37:39<08:56, 11.18s/it] 81%|████████  | 203/250 [37:50<08:41, 11.09s/it] 82%|████████▏ | 204/250 [38:02<08:48, 11.48s/it] 82%|████████▏ | 205/250 [38:12<08:12, 10.95s/it] 82%|████████▏ | 206/250 [38:21<07:39, 10.44s/it] 83%|████████▎ | 207/250 [38:38<08:53, 12.40s/it] 83%|████████▎ | 208/250 [38:47<07:54, 11.29s/it] 84%|████████▎ | 209/250 [38:55<06:59, 10.22s/it] 84%|████████▍ | 210/250 [39:05<06:50, 10.27s/it] 84%|████████▍ | 211/250 [39:25<08:29, 13.05s/it] 85%|████████▍ | 212/250 [39:33<07:18, 11.55s/it] 85%|████████▌ | 213/250 [39:42<06:39, 10.81s/it] 86%|████████▌ | 214/250 [39:50<06:07, 10.19s/it] 86%|████████▌ | 215/250 [40:05<06:38, 11.38s/it] 86%|████████▋ | 216/250 [40:13<05:54, 10.44s/it] 87%|████████▋ | 217/250 [40:25<05:57, 10.84s/it] 87%|████████▋ | 218/250 [40:33<05:24, 10.14s/it] 88%|████████▊ | 219/250 [40:41<04:49,  9.34s/it] 88%|████████▊ | 220/250 [40:53<05:04, 10.15s/it] 88%|████████▊ | 221/250 [41:04<05:08, 10.65s/it] 89%|████████▉ | 222/250 [41:24<06:13, 13.34s/it] 89%|████████▉ | 223/250 [41:32<05:16, 11.72s/it] 90%|████████▉ | 224/250 [41:53<06:14, 14.39s/it] 90%|█████████ | 225/250 [41:59<04:58, 11.93s/it] 90%|█████████ | 226/250 [42:05<04:03, 10.13s/it] 91%|█████████ | 227/250 [42:22<04:42, 12.29s/it] 91%|█████████ | 228/250 [42:30<03:59, 10.88s/it] 92%|█████████▏| 229/250 [42:37<03:26,  9.83s/it] 92%|█████████▏| 230/250 [42:47<03:20, 10.04s/it] 92%|█████████▏| 231/250 [42:56<03:03,  9.65s/it] 93%|█████████▎| 232/250 [43:15<03:42, 12.37s/it] 93%|█████████▎| 233/250 [43:27<03:30, 12.36s/it] 94%|█████████▎| 234/250 [43:36<03:00, 11.27s/it] 94%|█████████▍| 235/250 [43:43<02:29, 10.00s/it] 94%|█████████▍| 236/250 [43:50<02:07,  9.08s/it] 95%|█████████▍| 237/250 [44:09<02:38, 12.18s/it] 95%|█████████▌| 238/250 [44:18<02:14, 11.19s/it] 96%|█████████▌| 239/250 [44:31<02:08, 11.66s/it] 96%|█████████▌| 240/250 [44:38<01:43, 10.37s/it] 96%|█████████▋| 241/250 [44:51<01:38, 10.97s/it] 97%|█████████▋| 242/250 [45:09<01:44, 13.02s/it] 97%|█████████▋| 243/250 [45:18<01:24, 12.01s/it] 98%|█████████▊| 244/250 [45:27<01:07, 11.18s/it] 98%|█████████▊| 245/250 [45:47<01:08, 13.65s/it] 98%|█████████▊| 246/250 [46:05<01:00, 15.13s/it] 99%|█████████▉| 247/250 [46:13<00:38, 12.82s/it] 99%|█████████▉| 248/250 [46:20<00:22, 11.04s/it]100%|█████████▉| 249/250 [46:28<00:10, 10.18s/it]100%|██████████| 250/250 [46:34<00:00,  9.01s/it]100%|██████████| 250/250 [46:34<00:00, 11.18s/it]ngram match: 0.4276237606381349, weighted ngram match: 0.42933556239425025, syntax_match: 0.47150661213767575, dataflow_match: 0.4761995977396801
[07/30/2023 00:16:37] {test_reader.py:76} INFO - ***** Eval results *****
[07/30/2023 00:16:37] {test_reader.py:78} INFO -   bleu = 42.76
[07/30/2023 00:16:37] {test_reader.py:78} INFO -   codebleu = 45.1166
[07/30/2023 00:16:37] {test_reader.py:78} INFO -   em = 23.1
[07/30/2023 00:16:37] {test_reader.py:289} INFO - [best-bleu] bleu-4: 42.76, em: 23.1000, codebleu: 45.1166


