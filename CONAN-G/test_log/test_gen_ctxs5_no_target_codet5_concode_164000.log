[07/27/2023 14:02:40] {options.py:113} INFO - 
              answer_maxlength: 256                                     	(default: -1)
                checkpoint_dir: checkpoint                              	(default: ./checkpoint/)
                        device: cuda                                    	(default: None)
                     eval_data: /data1/wanghanbin/cerag_data/gen/concode/finetune_15000_gen_concode_test_100.pkl	(default: none)
                     eval_freq: 500                                     
                     eval_part: False                                   
               eval_print_freq: 1000                                    
                   global_rank: 0                                       	(default: None)
                is_distributed: False                                   	(default: None)
                       is_main: True                                    	(default: None)
                  is_slurm_job: False                                   	(default: None)
                    local_rank: 0                                       	(default: -1)
                     main_port: -1                                      
                       maxload: -1                                      
                    model_path: /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-164000/	(default: none)
                    model_size: base                                    
                     multi_gpu: False                                   	(default: None)
                    multi_node: False                                   	(default: None)
                     n_context: 5                                       	(default: 1)
                n_gpu_per_node: 1                                       	(default: None)
                       n_nodes: 1                                       	(default: None)
                          name: my_test_concode_164000                  	(default: experiment_name)
                      no_title: False                                   
                       node_id: 0                                       	(default: None)
            per_gpu_batch_size: 8                                       	(default: 1)
                     save_freq: 5000                                    
                          seed: 0                                       
                text_maxlength: 512                                     	(default: 200)
              train_batch_size: 8                                       	(default: None)
                    train_data: none                                    
                use_checkpoint: False                                   
                   with_target: no                                      
                    world_size: 1                                       	(default: None)
   write_crossattention_scores: False                                   
                 write_results: False                                   

[07/27/2023 14:02:41] {test_reader.py:236} INFO -    Loaded examples from: /data1/wanghanbin/cerag_data/gen/concode/finetune_15000_gen_concode_test_100.pkl
[07/27/2023 14:02:41] {test_reader.py:237} INFO -    Loaded 2000 eval examples.
[07/27/2023 14:02:41] {test_reader.py:238} INFO -    Example0
[07/27/2023 14:02:41] {test_reader.py:239} INFO -    id:0
[07/27/2023 14:02:41] {test_reader.py:240} INFO -    question:generate mappings for each function node and parameters and variables names associated with it . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void reset concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/27/2023 14:02:41] {test_reader.py:241} INFO -    target:void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; collectFuncNodes ( arg0 , loc0 , null ) ; }
[07/27/2023 14:02:41] {test_reader.py:242} INFO -    ctx0_text:void function ( ScriptOrFnNode arg0 ) { int loc0 = - 1 ; collectFuncNodes ( arg0 , loc0 , null ) ; }
[07/27/2023 14:02:41] {test_reader.py:243} INFO -    ctx0_linked:generate mappings for each function node and parameters and variables names associated with it . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void reset concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/27/2023 14:02:41] {test_reader.py:244} INFO -    ctx1_text:void function ( ) { funcObjects = new ObjArray ( ) ; functionVarMappings = new ArrayList ( ) ; }
[07/27/2023 14:02:41] {test_reader.py:245} INFO -    ctx1_linked:reset the static members for the tokenmapper . concode_field_sep int parentScope concode_elem_sep ArrayList functionBracePositions concode_elem_sep ObjArray funcObjects concode_elem_sep int functionNum concode_elem_sep ArrayList functionVarMappings concode_elem_sep int lastTokenCount concode_elem_sep ArrayList replacedTokens concode_field_sep boolean isInScopeChain concode_elem_sep void collectFunctionMappings concode_elem_sep void leaveNestingLevel concode_elem_sep String getMappedToken concode_elem_sep String getPreviousTokenMapping concode_elem_sep void collectFuncNodes concode_elem_sep int sourceCompress concode_elem_sep void enterNestingLevel
[07/27/2023 14:02:41] {test_reader.py:247} INFO -    Example1
[07/27/2023 14:02:41] {test_reader.py:248} INFO -    id:1
[07/27/2023 14:02:41] {test_reader.py:249} INFO -    question:returns a hash of the given files contents . reads the file fully into memory before hashing so only use with small files . concode_field_sep Sha256Hash ZERO_HASH concode_elem_sep byte[] bytes concode_field_sep Sha256Hash createDouble concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep Sha256Hash create concode_elem_sep BigInteger toBigInteger concode_elem_sep String toString concode_elem_sep Sha256Hash duplicate concode_elem_sep int compareTo concode_elem_sep byte[] getBytes
[07/27/2023 14:02:41] {test_reader.py:250} INFO -    target:Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
[07/27/2023 14:02:41] {test_reader.py:251} INFO -    ctx0_text:byte [ ] function ( final byte [ ] ... arg0 ) { SHA3Digest loc0 = new SHA3Digest ( 512 ) ; for ( final byte [ ] loc1 : arg0 ) { loc0 . update ( loc1 , 0 , loc1 . length ) ; } byte [ ] loc2 = new byte [ 512 / 8 ] ; loc0 . doFinal ( loc2 , 0 ) ; return loc2 ; }
[07/27/2023 14:02:41] {test_reader.py:252} INFO -    ctx0_linked:performs a sha3-512 hash of the concatenated inputs . concode_field_sep Logger LOGGER concode_field_sep byte[] sha3_256 concode_elem_sep byte[] ripemd160 concode_elem_sep byte[] hash
[07/27/2023 14:02:41] {test_reader.py:253} INFO -    ctx1_text:Sha256Hash function ( File arg0 ) { FileInputStream loc0 = new FileInputStream ( arg0 ) ; try { return create ( ByteStreams . toByteArray ( loc0 ) ) ; } finally { loc0 . close ( ) ; } }
[07/27/2023 14:02:41] {test_reader.py:254} INFO -    ctx1_linked:returns a hash of the given files contents . reads the file fully into memory before hashing so only use with small files . concode_field_sep Sha256Hash ZERO_HASH concode_elem_sep byte[] bytes concode_field_sep Sha256Hash createDouble concode_elem_sep int hashCode concode_elem_sep boolean equals concode_elem_sep Sha256Hash create concode_elem_sep BigInteger toBigInteger concode_elem_sep String toString concode_elem_sep Sha256Hash duplicate concode_elem_sep int compareTo concode_elem_sep byte[] getBytes
[07/27/2023 14:02:41] {test_reader.py:256} INFO -    Creating eval dataset.(CodeDataset)
[07/27/2023 14:02:41] {test_reader.py:257} INFO -    opt.n_context:5
[07/27/2023 14:02:41] {test_reader.py:258} INFO -    opt.with_target:no
[07/27/2023 14:02:41] {test_reader.py:265} INFO -    Creating eval sampler.(SequentialSampler)
[07/27/2023 14:02:41] {test_reader.py:268} INFO -    Creating eval dataloader.(DataLoader)
[07/27/2023 14:02:41] {configuration_utils.py:262} INFO - loading configuration file /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-164000/config.json
[07/27/2023 14:02:41] {configuration_utils.py:300} INFO - Model config T5Config {
  "_name_or_path": "/content/drive/MyDrive/CodeT5/pretrained_models/codet5_base",
  "architectures": [
    "FiDT5"
  ],
  "bos_token_id": 1,
  "d_ff": 3072,
  "d_kv": 64,
  "d_model": 768,
  "decoder_start_token_id": 0,
  "dropout_rate": 0.1,
  "eos_token_id": 2,
  "feed_forward_proj": "relu",
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0"
  },
  "initializer_factor": 1.0,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0
  },
  "layer_norm_epsilon": 1e-06,
  "model_type": "t5",
  "n_positions": 512,
  "num_decoder_layers": 12,
  "num_heads": 12,
  "num_layers": 12,
  "output_past": true,
  "pad_token_id": 0,
  "relative_attention_num_buckets": 32,
  "task_specific_params": {
    "summarization": {
      "early_stopping": true,
      "length_penalty": 2.0,
      "max_length": 200,
      "min_length": 30,
      "no_repeat_ngram_size": 3,
      "num_beams": 4,
      "prefix": "summarize: "
    },
    "translation_en_to_de": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to German: "
    },
    "translation_en_to_fr": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to French: "
    },
    "translation_en_to_ro": {
      "early_stopping": true,
      "max_length": 300,
      "num_beams": 4,
      "prefix": "translate English to Romanian: "
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.10.2",
  "vocab_size": 32100
}

[07/27/2023 14:02:41] {modeling_utils.py:665} INFO - loading weights file /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-164000/pytorch_model.bin
[07/27/2023 14:02:50] {modeling_utils.py:765} INFO - All model checkpoint weights were used when initializing FiDT5.

[07/27/2023 14:02:50] {modeling_utils.py:773} INFO - All the weights of FiDT5 were initialized from the model checkpoint at /data1/wanghanbin/fidgen/checkpoint/gen_ctxs5_no_target_concode/checkpoint/step-164000/.
If your task is similar to the task the model of the ckeckpoint was trained on, you can already use FiDT5 for predictions without further training.
[07/27/2023 14:02:56] {test_reader.py:281} INFO -    Start eval
[07/27/2023 14:02:56] {test_reader.py:31} INFO - ***** Running evaluation on test set *****
  0%|          | 0/250 [00:00<?, ?it/s]  0%|          | 1/250 [00:19<1:20:53, 19.49s/it]  1%|          | 2/250 [00:29<57:49, 13.99s/it]    1%|          | 3/250 [00:40<52:29, 12.75s/it]  2%|▏         | 4/250 [00:53<52:08, 12.72s/it]  2%|▏         | 5/250 [01:02<46:25, 11.37s/it]  2%|▏         | 6/250 [01:14<47:24, 11.66s/it]  3%|▎         | 7/250 [01:24<44:01, 10.87s/it]  3%|▎         | 8/250 [01:34<43:15, 10.73s/it]  4%|▎         | 9/250 [01:56<56:47, 14.14s/it]  4%|▍         | 10/250 [02:17<1:05:34, 16.40s/it]  4%|▍         | 11/250 [02:28<58:04, 14.58s/it]    5%|▍         | 12/250 [02:39<54:02, 13.63s/it]  5%|▌         | 13/250 [02:50<50:28, 12.78s/it]  6%|▌         | 14/250 [03:00<46:39, 11.86s/it]  6%|▌         | 15/250 [03:06<40:39, 10.38s/it]  6%|▋         | 16/250 [03:13<36:20,  9.32s/it]  7%|▋         | 17/250 [03:32<46:52, 12.07s/it]  7%|▋         | 18/250 [03:42<44:51, 11.60s/it]  8%|▊         | 19/250 [03:54<45:04, 11.71s/it]  8%|▊         | 20/250 [04:05<44:07, 11.51s/it]  8%|▊         | 21/250 [04:19<46:23, 12.16s/it]  9%|▉         | 22/250 [04:42<58:25, 15.38s/it]  9%|▉         | 23/250 [04:49<49:13, 13.01s/it] 10%|▉         | 24/250 [05:01<47:47, 12.69s/it] 10%|█         | 25/250 [05:25<59:29, 15.86s/it] 10%|█         | 26/250 [05:34<51:48, 13.88s/it] 11%|█         | 27/250 [05:44<47:33, 12.80s/it] 11%|█         | 28/250 [05:58<48:48, 13.19s/it] 12%|█▏        | 29/250 [06:12<49:08, 13.34s/it] 12%|█▏        | 30/250 [06:34<58:43, 16.01s/it] 12%|█▏        | 31/250 [06:49<56:50, 15.58s/it] 13%|█▎        | 32/250 [07:12<1:04:51, 17.85s/it] 13%|█▎        | 33/250 [07:26<1:00:44, 16.79s/it] 14%|█▎        | 34/250 [07:53<1:11:10, 19.77s/it] 14%|█▍        | 35/250 [08:11<1:08:58, 19.25s/it] 14%|█▍        | 36/250 [08:28<1:06:03, 18.52s/it] 15%|█▍        | 37/250 [08:48<1:07:42, 19.07s/it] 15%|█▌        | 38/250 [09:00<1:00:19, 17.07s/it] 16%|█▌        | 39/250 [09:10<52:31, 14.94s/it]   16%|█▌        | 40/250 [09:41<1:08:56, 19.70s/it] 16%|█▋        | 41/250 [09:48<55:33, 15.95s/it]   17%|█▋        | 42/250 [09:58<48:10, 13.90s/it] 17%|█▋        | 43/250 [10:13<49:25, 14.33s/it] 18%|█▊        | 44/250 [10:42<1:04:48, 18.88s/it] 18%|█▊        | 45/250 [11:07<1:10:21, 20.59s/it] 18%|█▊        | 46/250 [11:37<1:19:40, 23.44s/it] 19%|█▉        | 47/250 [11:50<1:08:15, 20.17s/it] 19%|█▉        | 48/250 [12:04<1:02:29, 18.56s/it] 20%|█▉        | 49/250 [12:25<1:04:06, 19.14s/it] 20%|██        | 50/250 [12:47<1:06:38, 19.99s/it] 20%|██        | 51/250 [12:59<58:43, 17.71s/it]   21%|██        | 52/250 [13:12<53:17, 16.15s/it] 21%|██        | 53/250 [13:43<1:07:44, 20.63s/it] 22%|██▏       | 54/250 [14:06<1:09:46, 21.36s/it] 22%|██▏       | 55/250 [14:19<1:01:30, 18.93s/it] 22%|██▏       | 56/250 [14:32<55:25, 17.14s/it]   23%|██▎       | 57/250 [14:52<57:39, 17.93s/it] 23%|██▎       | 58/250 [15:05<52:16, 16.34s/it] 24%|██▎       | 59/250 [15:17<47:50, 15.03s/it] 24%|██▍       | 60/250 [15:52<1:07:19, 21.26s/it] 24%|██▍       | 61/250 [16:03<56:34, 17.96s/it]   25%|██▍       | 62/250 [16:13<48:55, 15.61s/it] 25%|██▌       | 63/250 [16:25<45:48, 14.70s/it] 26%|██▌       | 64/250 [16:34<40:01, 12.91s/it] 26%|██▌       | 65/250 [17:00<52:07, 16.91s/it] 26%|██▋       | 66/250 [17:13<48:27, 15.80s/it] 27%|██▋       | 67/250 [17:22<41:22, 13.56s/it] 27%|██▋       | 68/250 [17:31<37:08, 12.24s/it] 28%|██▊       | 69/250 [17:51<43:42, 14.49s/it] 28%|██▊       | 70/250 [18:05<43:22, 14.46s/it] 28%|██▊       | 71/250 [18:25<47:37, 15.96s/it] 29%|██▉       | 72/250 [18:38<44:42, 15.07s/it] 29%|██▉       | 73/250 [18:53<44:50, 15.20s/it] 30%|██▉       | 74/250 [19:07<43:41, 14.89s/it] 30%|███       | 75/250 [19:24<45:08, 15.47s/it] 30%|███       | 76/250 [19:39<44:26, 15.33s/it] 31%|███       | 77/250 [19:51<40:50, 14.17s/it] 31%|███       | 78/250 [20:04<40:15, 14.04s/it] 32%|███▏      | 79/250 [20:42<1:00:18, 21.16s/it] 32%|███▏      | 80/250 [21:17<1:11:33, 25.25s/it] 32%|███▏      | 81/250 [21:50<1:18:02, 27.71s/it] 33%|███▎      | 82/250 [22:06<1:07:21, 24.06s/it] 33%|███▎      | 83/250 [22:31<1:07:40, 24.32s/it] 34%|███▎      | 84/250 [23:03<1:13:58, 26.74s/it] 34%|███▍      | 85/250 [23:25<1:09:12, 25.17s/it] 34%|███▍      | 86/250 [23:40<1:00:25, 22.11s/it] 35%|███▍      | 87/250 [24:23<1:17:30, 28.53s/it] 35%|███▌      | 88/250 [24:37<1:05:08, 24.13s/it] 36%|███▌      | 89/250 [24:59<1:02:55, 23.45s/it] 36%|███▌      | 90/250 [25:13<55:05, 20.66s/it]   36%|███▋      | 91/250 [25:21<45:03, 17.01s/it] 37%|███▋      | 92/250 [25:35<42:09, 16.01s/it] 37%|███▋      | 93/250 [25:57<46:37, 17.82s/it] 38%|███▊      | 94/250 [26:12<44:16, 17.03s/it] 38%|███▊      | 95/250 [26:23<39:01, 15.10s/it] 38%|███▊      | 96/250 [26:36<37:24, 14.57s/it] 39%|███▉      | 97/250 [26:47<34:00, 13.33s/it] 39%|███▉      | 98/250 [27:22<50:12, 19.82s/it] 40%|███▉      | 99/250 [27:35<44:42, 17.76s/it] 40%|████      | 100/250 [28:00<49:47, 19.92s/it] 40%|████      | 101/250 [28:11<43:03, 17.34s/it] 41%|████      | 102/250 [28:24<39:27, 16.00s/it] 41%|████      | 103/250 [28:36<36:35, 14.93s/it] 42%|████▏     | 104/250 [28:48<34:07, 14.02s/it] 42%|████▏     | 105/250 [29:01<33:16, 13.77s/it] 42%|████▏     | 106/250 [29:10<29:42, 12.38s/it] 43%|████▎     | 107/250 [29:33<36:45, 15.43s/it] 43%|████▎     | 108/250 [29:44<33:28, 14.15s/it] 44%|████▎     | 109/250 [30:04<37:21, 15.90s/it] 44%|████▍     | 110/250 [30:28<42:46, 18.33s/it] 44%|████▍     | 111/250 [30:38<36:35, 15.79s/it] 45%|████▍     | 112/250 [31:04<43:02, 18.72s/it] 45%|████▌     | 113/250 [31:31<48:22, 21.19s/it] 46%|████▌     | 114/250 [31:56<50:55, 22.47s/it] 46%|████▌     | 115/250 [32:24<54:10, 24.08s/it] 46%|████▋     | 116/250 [33:06<1:05:56, 29.53s/it] 47%|████▋     | 117/250 [33:28<1:00:10, 27.15s/it] 47%|████▋     | 118/250 [33:44<52:27, 23.85s/it]   48%|████▊     | 119/250 [33:59<46:30, 21.30s/it] 48%|████▊     | 120/250 [34:11<40:15, 18.58s/it] 48%|████▊     | 121/250 [34:26<37:06, 17.26s/it] 49%|████▉     | 122/250 [35:22<1:01:42, 28.92s/it] 49%|████▉     | 123/250 [35:52<1:02:09, 29.36s/it] 50%|████▉     | 124/250 [36:29<1:06:25, 31.63s/it] 50%|█████     | 125/250 [37:19<1:17:20, 37.13s/it] 50%|█████     | 126/250 [38:01<1:20:00, 38.72s/it] 51%|█████     | 127/250 [38:30<1:12:54, 35.57s/it] 51%|█████     | 128/250 [38:58<1:07:45, 33.33s/it] 52%|█████▏    | 129/250 [40:45<1:51:45, 55.42s/it] 52%|█████▏    | 130/250 [41:09<1:32:00, 46.01s/it] 52%|█████▏    | 131/250 [41:40<1:22:29, 41.59s/it] 53%|█████▎    | 132/250 [42:15<1:17:58, 39.65s/it] 53%|█████▎    | 133/250 [43:45<1:46:34, 54.66s/it] 54%|█████▎    | 134/250 [44:08<1:27:37, 45.33s/it] 54%|█████▍    | 135/250 [44:54<1:27:14, 45.51s/it] 54%|█████▍    | 136/250 [45:21<1:15:29, 39.73s/it] 55%|█████▍    | 137/250 [45:51<1:09:27, 36.88s/it] 55%|█████▌    | 138/250 [46:51<1:21:38, 43.73s/it] 56%|█████▌    | 139/250 [48:34<1:53:59, 61.62s/it] 56%|█████▌    | 140/250 [49:08<1:37:48, 53.35s/it] 56%|█████▋    | 141/250 [50:04<1:38:13, 54.07s/it] 57%|█████▋    | 142/250 [50:34<1:24:38, 47.02s/it] 57%|█████▋    | 143/250 [51:12<1:18:42, 44.13s/it] 58%|█████▊    | 144/250 [52:45<1:44:14, 59.01s/it] 58%|█████▊    | 145/250 [53:06<1:22:59, 47.42s/it] 58%|█████▊    | 146/250 [53:28<1:09:03, 39.85s/it] 59%|█████▉    | 147/250 [53:51<59:54, 34.90s/it]   59%|█████▉    | 148/250 [54:01<46:40, 27.46s/it] 60%|█████▉    | 149/250 [54:14<38:43, 23.01s/it] 60%|██████    | 150/250 [54:28<33:50, 20.30s/it] 60%|██████    | 151/250 [54:40<29:15, 17.73s/it] 61%|██████    | 152/250 [54:55<27:51, 17.05s/it] 61%|██████    | 153/250 [55:05<24:17, 15.03s/it] 62%|██████▏   | 154/250 [55:48<37:23, 23.37s/it] 62%|██████▏   | 155/250 [56:12<37:21, 23.60s/it] 62%|██████▏   | 156/250 [56:35<36:22, 23.22s/it] 63%|██████▎   | 157/250 [56:45<30:09, 19.46s/it] 63%|██████▎   | 158/250 [57:07<30:59, 20.21s/it] 64%|██████▎   | 159/250 [57:21<27:31, 18.15s/it] 64%|██████▍   | 160/250 [58:02<37:34, 25.05s/it] 64%|██████▍   | 161/250 [58:23<35:19, 23.81s/it] 65%|██████▍   | 162/250 [58:41<32:34, 22.21s/it] 65%|██████▌   | 163/250 [58:54<28:10, 19.43s/it] 66%|██████▌   | 164/250 [59:15<28:34, 19.93s/it] 66%|██████▌   | 165/250 [1:00:09<42:22, 29.91s/it] 66%|██████▋   | 166/250 [1:00:27<37:12, 26.57s/it] 67%|██████▋   | 167/250 [1:00:39<30:46, 22.25s/it] 67%|██████▋   | 168/250 [1:00:59<29:27, 21.56s/it] 68%|██████▊   | 169/250 [1:01:11<25:15, 18.70s/it] 68%|██████▊   | 170/250 [1:01:47<31:33, 23.67s/it] 68%|██████▊   | 171/250 [1:02:02<27:49, 21.13s/it] 69%|██████▉   | 172/250 [1:02:16<24:35, 18.92s/it] 69%|██████▉   | 173/250 [1:02:29<22:06, 17.22s/it] 70%|██████▉   | 174/250 [1:02:53<24:24, 19.26s/it] 70%|███████   | 175/250 [1:03:03<20:41, 16.55s/it] 70%|███████   | 176/250 [1:03:18<19:44, 16.01s/it] 71%|███████   | 177/250 [1:03:30<18:02, 14.83s/it] 71%|███████   | 178/250 [1:03:41<16:27, 13.71s/it] 72%|███████▏  | 179/250 [1:03:59<17:45, 15.00s/it] 72%|███████▏  | 180/250 [1:04:11<16:30, 14.15s/it] 72%|███████▏  | 181/250 [1:04:28<17:07, 14.89s/it] 73%|███████▎  | 182/250 [1:04:46<17:56, 15.83s/it] 73%|███████▎  | 183/250 [1:05:22<24:27, 21.91s/it] 74%|███████▎  | 184/250 [1:05:33<20:27, 18.60s/it] 74%|███████▍  | 185/250 [1:05:42<17:09, 15.85s/it] 74%|███████▍  | 186/250 [1:05:55<15:58, 14.98s/it] 75%|███████▍  | 187/250 [1:06:08<15:02, 14.32s/it] 75%|███████▌  | 188/250 [1:06:27<16:14, 15.72s/it] 76%|███████▌  | 189/250 [1:06:40<15:15, 15.01s/it] 76%|███████▌  | 190/250 [1:07:00<16:15, 16.26s/it] 76%|███████▋  | 191/250 [1:07:15<15:35, 15.85s/it] 77%|███████▋  | 192/250 [1:07:25<13:47, 14.27s/it] 77%|███████▋  | 193/250 [1:07:40<13:49, 14.55s/it] 78%|███████▊  | 194/250 [1:07:56<13:58, 14.98s/it] 78%|███████▊  | 195/250 [1:08:30<19:01, 20.75s/it] 78%|███████▊  | 196/250 [1:08:49<18:09, 20.17s/it] 79%|███████▉  | 197/250 [1:09:06<16:49, 19.04s/it] 79%|███████▉  | 198/250 [1:09:17<14:23, 16.60s/it] 80%|███████▉  | 199/250 [1:09:32<13:54, 16.37s/it] 80%|████████  | 200/250 [1:09:47<13:08, 15.76s/it] 80%|████████  | 201/250 [1:10:10<14:39, 17.94s/it] 81%|████████  | 202/250 [1:10:30<14:57, 18.69s/it] 81%|████████  | 203/250 [1:10:49<14:45, 18.85s/it] 82%|████████▏ | 204/250 [1:11:00<12:37, 16.47s/it] 82%|████████▏ | 205/250 [1:11:23<13:39, 18.22s/it] 82%|████████▏ | 206/250 [1:11:37<12:33, 17.12s/it] 83%|████████▎ | 207/250 [1:11:55<12:24, 17.32s/it] 83%|████████▎ | 208/250 [1:12:11<11:51, 16.95s/it] 84%|████████▎ | 209/250 [1:12:23<10:35, 15.51s/it] 84%|████████▍ | 210/250 [1:12:37<09:55, 14.88s/it] 84%|████████▍ | 211/250 [1:13:24<16:02, 24.67s/it] 85%|████████▍ | 212/250 [1:13:41<14:04, 22.21s/it] 85%|████████▌ | 213/250 [1:14:06<14:12, 23.05s/it] 86%|████████▌ | 214/250 [1:14:22<12:38, 21.08s/it] 86%|████████▌ | 215/250 [1:14:51<13:43, 23.53s/it] 86%|████████▋ | 216/250 [1:15:08<12:12, 21.55s/it] 87%|████████▋ | 217/250 [1:15:25<11:02, 20.07s/it] 87%|████████▋ | 218/250 [1:15:45<10:46, 20.21s/it] 88%|████████▊ | 219/250 [1:16:22<12:57, 25.07s/it] 88%|████████▊ | 220/250 [1:16:56<13:50, 27.67s/it] 88%|████████▊ | 221/250 [1:17:28<14:03, 29.09s/it] 89%|████████▉ | 222/250 [1:19:09<23:37, 50.63s/it] 89%|████████▉ | 223/250 [1:19:36<19:39, 43.70s/it] 90%|████████▉ | 224/250 [1:20:16<18:21, 42.36s/it] 90%|█████████ | 225/250 [1:20:45<15:59, 38.38s/it] 90%|█████████ | 226/250 [1:21:19<14:50, 37.09s/it] 91%|█████████ | 227/250 [1:21:59<14:33, 37.96s/it] 91%|█████████ | 228/250 [1:22:48<15:09, 41.33s/it] 92%|█████████▏| 229/250 [1:23:28<14:20, 40.95s/it] 92%|█████████▏| 230/250 [1:24:00<12:44, 38.24s/it] 92%|█████████▏| 231/250 [1:24:37<11:57, 37.78s/it] 93%|█████████▎| 232/250 [1:25:12<11:05, 37.00s/it] 93%|█████████▎| 233/250 [1:26:36<14:29, 51.17s/it] 94%|█████████▎| 234/250 [1:27:07<12:01, 45.11s/it] 94%|█████████▍| 235/250 [1:28:02<12:02, 48.15s/it] 94%|█████████▍| 236/250 [1:29:42<14:51, 63.70s/it] 95%|█████████▍| 237/250 [1:30:43<13:37, 62.86s/it] 95%|█████████▌| 238/250 [1:32:08<13:54, 69.51s/it] 96%|█████████▌| 239/250 [1:33:13<12:28, 68.08s/it] 96%|█████████▌| 240/250 [1:33:35<09:01, 54.15s/it] 96%|█████████▋| 241/250 [1:33:49<06:20, 42.27s/it] 97%|█████████▋| 242/250 [1:34:05<04:34, 34.35s/it] 97%|█████████▋| 243/250 [1:34:18<03:15, 27.96s/it] 98%|█████████▊| 244/250 [1:34:36<02:29, 24.84s/it] 98%|█████████▊| 245/250 [1:35:00<02:02, 24.56s/it] 98%|█████████▊| 246/250 [1:35:12<01:24, 21.06s/it] 99%|█████████▉| 247/250 [1:35:55<01:22, 27.55s/it] 99%|█████████▉| 248/250 [1:36:28<00:58, 29.10s/it]100%|█████████▉| 249/250 [1:36:44<00:25, 25.14s/it]100%|██████████| 250/250 [1:37:10<00:00, 25.42s/it]100%|██████████| 250/250 [1:37:10<00:00, 23.32s/it]ngram match: 0.42406370304308993, weighted ngram match: 0.43763559129261287, syntax_match: 0.472014089972835, dataflow_match: 0.4933435494684417
[07/27/2023 15:40:13] {test_reader.py:76} INFO - ***** Eval results *****
[07/27/2023 15:40:13] {test_reader.py:78} INFO -   bleu = 42.41
[07/27/2023 15:40:13] {test_reader.py:78} INFO -   codebleu = 45.6764
[07/27/2023 15:40:13] {test_reader.py:78} INFO -   em = 21.6
[07/27/2023 15:40:13] {test_reader.py:289} INFO - [best-bleu] bleu-4: 42.41, em: 21.6000, codebleu: 45.6764


